// Code generated by fastssz. DO NOT EDIT.
// Hash: 406e108995dd67bde556bc08794f3ab38ba26f199f7ad54c950be655fb530f86
// Version: 0.1.3
package storage

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the storageShare object
func (s *storageShare) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the storageShare object to a target array
func (s *storageShare) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(93)

	// Offset (0) 'ValidatorPubKey'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.ValidatorPubKey)

	// Offset (1) 'SharePubKey'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.SharePubKey)

	// Offset (2) 'Committee'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(s.Committee); ii++ {
		offset += 4
		offset += s.Committee[ii].SizeSSZ()
	}

	// Field (3) 'DomainType'
	dst = append(dst, s.DomainType[:]...)

	// Field (4) 'FeeRecipientAddress'
	dst = append(dst, s.FeeRecipientAddress[:]...)

	// Offset (5) 'Graffiti'
	dst = ssz.WriteOffset(dst, offset)

	// Field (6) 'BeaconMetadata'
	if dst, err = s.BeaconMetadata.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (7) 'OwnerAddress'
	dst = append(dst, s.OwnerAddress[:]...)

	// Field (8) 'Liquidated'
	dst = ssz.MarshalBool(dst, s.Liquidated)

	// Field (0) 'ValidatorPubKey'
	if size := len(s.ValidatorPubKey); size > 48 {
		err = ssz.ErrBytesLengthFn("storageShare.ValidatorPubKey", size, 48)
		return
	}
	dst = append(dst, s.ValidatorPubKey...)

	// Field (1) 'SharePubKey'
	if size := len(s.SharePubKey); size > 48 {
		err = ssz.ErrBytesLengthFn("storageShare.SharePubKey", size, 48)
		return
	}
	dst = append(dst, s.SharePubKey...)

	// Field (2) 'Committee'
	if size := len(s.Committee); size > 13 {
		err = ssz.ErrListTooBigFn("storageShare.Committee", size, 13)
		return
	}
	{
		offset = 4 * len(s.Committee)
		for ii := 0; ii < len(s.Committee); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += s.Committee[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(s.Committee); ii++ {
		if dst, err = s.Committee[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (5) 'Graffiti'
	if size := len(s.Graffiti); size > 32 {
		err = ssz.ErrBytesLengthFn("storageShare.Graffiti", size, 32)
		return
	}
	dst = append(dst, s.Graffiti...)

	return
}

// UnmarshalSSZ ssz unmarshals the storageShare object
func (s *storageShare) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 93 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2, o5 uint64

	// Offset (0) 'ValidatorPubKey'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 != 93 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'SharePubKey'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'Committee'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Field (3) 'DomainType'
	copy(s.DomainType[:], buf[12:16])

	// Field (4) 'FeeRecipientAddress'
	copy(s.FeeRecipientAddress[:], buf[16:36])

	// Offset (5) 'Graffiti'
	if o5 = ssz.ReadOffset(buf[36:40]); o5 > size || o2 > o5 {
		return ssz.ErrOffset
	}

	// Field (6) 'BeaconMetadata'
	if err = s.BeaconMetadata.UnmarshalSSZ(buf[40:72]); err != nil {
		return err
	}

	// Field (7) 'OwnerAddress'
	copy(s.OwnerAddress[:], buf[72:92])

	// Field (8) 'Liquidated'
	s.Liquidated = ssz.UnmarshalBool(buf[92:93])

	// Field (0) 'ValidatorPubKey'
	{
		buf = tail[o0:o1]
		if len(buf) > 48 {
			return ssz.ErrBytesLength
		}
		if cap(s.ValidatorPubKey) == 0 {
			s.ValidatorPubKey = make([]byte, 0, len(buf))
		}
		s.ValidatorPubKey = append(s.ValidatorPubKey, buf...)
	}

	// Field (1) 'SharePubKey'
	{
		buf = tail[o1:o2]
		if len(buf) > 48 {
			return ssz.ErrBytesLength
		}
		if cap(s.SharePubKey) == 0 {
			s.SharePubKey = make([]byte, 0, len(buf))
		}
		s.SharePubKey = append(s.SharePubKey, buf...)
	}

	// Field (2) 'Committee'
	{
		buf = tail[o2:o5]
		num, err := ssz.DecodeDynamicLength(buf, 13)
		if err != nil {
			return err
		}
		s.Committee = make([]*storageOperator, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if s.Committee[indx] == nil {
				s.Committee[indx] = new(storageOperator)
			}
			if err = s.Committee[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (5) 'Graffiti'
	{
		buf = tail[o5:]
		if len(buf) > 32 {
			return ssz.ErrBytesLength
		}
		if cap(s.Graffiti) == 0 {
			s.Graffiti = make([]byte, 0, len(buf))
		}
		s.Graffiti = append(s.Graffiti, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the storageShare object
func (s *storageShare) SizeSSZ() (size int) {
	size = 93

	// Field (0) 'ValidatorPubKey'
	size += len(s.ValidatorPubKey)

	// Field (1) 'SharePubKey'
	size += len(s.SharePubKey)

	// Field (2) 'Committee'
	for ii := 0; ii < len(s.Committee); ii++ {
		size += 4
		size += s.Committee[ii].SizeSSZ()
	}

	// Field (5) 'Graffiti'
	size += len(s.Graffiti)

	return
}

// HashTreeRoot ssz hashes the storageShare object
func (s *storageShare) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the storageShare object with a hasher
func (s *storageShare) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'ValidatorPubKey'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(s.ValidatorPubKey))
		if byteLen > 48 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(s.ValidatorPubKey)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (48+31)/32)
	}

	// Field (1) 'SharePubKey'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(s.SharePubKey))
		if byteLen > 48 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(s.SharePubKey)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (48+31)/32)
	}

	// Field (2) 'Committee'
	{
		subIndx := hh.Index()
		num := uint64(len(s.Committee))
		if num > 13 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range s.Committee {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 13)
	}

	// Field (3) 'DomainType'
	hh.PutBytes(s.DomainType[:])

	// Field (4) 'FeeRecipientAddress'
	hh.PutBytes(s.FeeRecipientAddress[:])

	// Field (5) 'Graffiti'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(s.Graffiti))
		if byteLen > 32 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(s.Graffiti)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (32+31)/32)
	}

	// Field (6) 'BeaconMetadata'
	if err = s.BeaconMetadata.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (7) 'OwnerAddress'
	hh.PutBytes(s.OwnerAddress[:])

	// Field (8) 'Liquidated'
	hh.PutBool(s.Liquidated)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the storageShare object
func (s *storageShare) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}

// MarshalSSZ ssz marshals the storageOperator object
func (s *storageOperator) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the storageOperator object to a target array
func (s *storageOperator) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(12)

	// Field (0) 'OperatorID'
	dst = ssz.MarshalUint64(dst, s.OperatorID)

	// Offset (1) 'PubKey'
	dst = ssz.WriteOffset(dst, offset)

	// Field (1) 'PubKey'
	if size := len(s.PubKey); size > 48 {
		err = ssz.ErrBytesLengthFn("storageOperator.PubKey", size, 48)
		return
	}
	dst = append(dst, s.PubKey...)

	return
}

// UnmarshalSSZ ssz unmarshals the storageOperator object
func (s *storageOperator) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 12 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'OperatorID'
	s.OperatorID = ssz.UnmarshallUint64(buf[0:8])

	// Offset (1) 'PubKey'
	if o1 = ssz.ReadOffset(buf[8:12]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 != 12 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'PubKey'
	{
		buf = tail[o1:]
		if len(buf) > 48 {
			return ssz.ErrBytesLength
		}
		if cap(s.PubKey) == 0 {
			s.PubKey = make([]byte, 0, len(buf))
		}
		s.PubKey = append(s.PubKey, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the storageOperator object
func (s *storageOperator) SizeSSZ() (size int) {
	size = 12

	// Field (1) 'PubKey'
	size += len(s.PubKey)

	return
}

// HashTreeRoot ssz hashes the storageOperator object
func (s *storageOperator) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the storageOperator object with a hasher
func (s *storageOperator) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'OperatorID'
	hh.PutUint64(s.OperatorID)

	// Field (1) 'PubKey'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(s.PubKey))
		if byteLen > 48 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(s.PubKey)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (48+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the storageOperator object
func (s *storageOperator) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}

// MarshalSSZ ssz marshals the storageShareValidatorMetadata object
func (s *storageShareValidatorMetadata) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the storageShareValidatorMetadata object to a target array
func (s *storageShareValidatorMetadata) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Balance'
	dst = ssz.MarshalUint64(dst, s.Balance)

	// Field (1) 'Status'
	dst = ssz.MarshalUint64(dst, s.Status)

	// Field (2) 'Index'
	dst = ssz.MarshalUint64(dst, s.Index)

	// Field (3) 'ActivationEpoch'
	dst = ssz.MarshalUint64(dst, s.ActivationEpoch)

	return
}

// UnmarshalSSZ ssz unmarshals the storageShareValidatorMetadata object
func (s *storageShareValidatorMetadata) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 32 {
		return ssz.ErrSize
	}

	// Field (0) 'Balance'
	s.Balance = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'Status'
	s.Status = ssz.UnmarshallUint64(buf[8:16])

	// Field (2) 'Index'
	s.Index = ssz.UnmarshallUint64(buf[16:24])

	// Field (3) 'ActivationEpoch'
	s.ActivationEpoch = ssz.UnmarshallUint64(buf[24:32])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the storageShareValidatorMetadata object
func (s *storageShareValidatorMetadata) SizeSSZ() (size int) {
	size = 32
	return
}

// HashTreeRoot ssz hashes the storageShareValidatorMetadata object
func (s *storageShareValidatorMetadata) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the storageShareValidatorMetadata object with a hasher
func (s *storageShareValidatorMetadata) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Balance'
	hh.PutUint64(s.Balance)

	// Field (1) 'Status'
	hh.PutUint64(s.Status)

	// Field (2) 'Index'
	hh.PutUint64(s.Index)

	// Field (3) 'ActivationEpoch'
	hh.PutUint64(s.ActivationEpoch)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the storageShareValidatorMetadata object
func (s *storageShareValidatorMetadata) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}
