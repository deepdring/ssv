// Code generated by MockGen. DO NOT EDIT.
// Source: ./recipients.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=./mocks/recipients.go -source=./recipients.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	bellatrix "github.com/attestantio/go-eth2-client/spec/bellatrix"
	common "github.com/ethereum/go-ethereum/common"
	storage "github.com/ssvlabs/ssv/registry/storage"
	basedb "github.com/ssvlabs/ssv/storage/basedb"
	gomock "go.uber.org/mock/gomock"
)

// MockRecipients is a mock of Recipients interface.
type MockRecipients struct {
	ctrl     *gomock.Controller
	recorder *MockRecipientsMockRecorder
}

// MockRecipientsMockRecorder is the mock recorder for MockRecipients.
type MockRecipientsMockRecorder struct {
	mock *MockRecipients
}

// NewMockRecipients creates a new mock instance.
func NewMockRecipients(ctrl *gomock.Controller) *MockRecipients {
	mock := &MockRecipients{ctrl: ctrl}
	mock.recorder = &MockRecipientsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecipients) EXPECT() *MockRecipientsMockRecorder {
	return m.recorder
}

// BumpNonce mocks base method.
func (m *MockRecipients) BumpNonce(rw basedb.ReadWriter, owner common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BumpNonce", rw, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// BumpNonce indicates an expected call of BumpNonce.
func (mr *MockRecipientsMockRecorder) BumpNonce(rw, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BumpNonce", reflect.TypeOf((*MockRecipients)(nil).BumpNonce), rw, owner)
}

// DeleteRecipientData mocks base method.
func (m *MockRecipients) DeleteRecipientData(rw basedb.ReadWriter, owner common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecipientData", rw, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecipientData indicates an expected call of DeleteRecipientData.
func (mr *MockRecipientsMockRecorder) DeleteRecipientData(rw, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecipientData", reflect.TypeOf((*MockRecipients)(nil).DeleteRecipientData), rw, owner)
}

// DropRecipients mocks base method.
func (m *MockRecipients) DropRecipients() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropRecipients")
	ret0, _ := ret[0].(error)
	return ret0
}

// DropRecipients indicates an expected call of DropRecipients.
func (mr *MockRecipientsMockRecorder) DropRecipients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropRecipients", reflect.TypeOf((*MockRecipients)(nil).DropRecipients))
}

// GetNextNonce mocks base method.
func (m *MockRecipients) GetNextNonce(r basedb.Reader, owner common.Address) (storage.Nonce, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextNonce", r, owner)
	ret0, _ := ret[0].(storage.Nonce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextNonce indicates an expected call of GetNextNonce.
func (mr *MockRecipientsMockRecorder) GetNextNonce(r, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextNonce", reflect.TypeOf((*MockRecipients)(nil).GetNextNonce), r, owner)
}

// GetRecipientData mocks base method.
func (m *MockRecipients) GetRecipientData(r basedb.Reader, owner common.Address) (*storage.RecipientData, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipientData", r, owner)
	ret0, _ := ret[0].(*storage.RecipientData)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRecipientData indicates an expected call of GetRecipientData.
func (mr *MockRecipientsMockRecorder) GetRecipientData(r, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipientData", reflect.TypeOf((*MockRecipients)(nil).GetRecipientData), r, owner)
}

// GetRecipientDataMany mocks base method.
func (m *MockRecipients) GetRecipientDataMany(r basedb.Reader, owners []common.Address) (map[common.Address]bellatrix.ExecutionAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipientDataMany", r, owners)
	ret0, _ := ret[0].(map[common.Address]bellatrix.ExecutionAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecipientDataMany indicates an expected call of GetRecipientDataMany.
func (mr *MockRecipientsMockRecorder) GetRecipientDataMany(r, owners any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipientDataMany", reflect.TypeOf((*MockRecipients)(nil).GetRecipientDataMany), r, owners)
}

// GetRecipientsPrefix mocks base method.
func (m *MockRecipients) GetRecipientsPrefix() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipientsPrefix")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetRecipientsPrefix indicates an expected call of GetRecipientsPrefix.
func (mr *MockRecipientsMockRecorder) GetRecipientsPrefix() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipientsPrefix", reflect.TypeOf((*MockRecipients)(nil).GetRecipientsPrefix))
}

// SaveRecipientData mocks base method.
func (m *MockRecipients) SaveRecipientData(rw basedb.ReadWriter, recipientData *storage.RecipientData) (*storage.RecipientData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRecipientData", rw, recipientData)
	ret0, _ := ret[0].(*storage.RecipientData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveRecipientData indicates an expected call of SaveRecipientData.
func (mr *MockRecipientsMockRecorder) SaveRecipientData(rw, recipientData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRecipientData", reflect.TypeOf((*MockRecipients)(nil).SaveRecipientData), rw, recipientData)
}
