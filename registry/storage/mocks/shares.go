// Code generated by MockGen. DO NOT EDIT.
// Source: ./shares.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=./mocks/shares.go -source=./shares.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/ssvlabs/ssv-spec/types"
	beacon "github.com/ssvlabs/ssv/protocol/v2/blockchain/beacon"
	types0 "github.com/ssvlabs/ssv/protocol/v2/types"
	storage "github.com/ssvlabs/ssv/registry/storage"
	basedb "github.com/ssvlabs/ssv/storage/basedb"
	gomock "go.uber.org/mock/gomock"
)

// MockShares is a mock of Shares interface.
type MockShares struct {
	ctrl     *gomock.Controller
	recorder *MockSharesMockRecorder
}

// MockSharesMockRecorder is the mock recorder for MockShares.
type MockSharesMockRecorder struct {
	mock *MockShares
}

// NewMockShares creates a new mock instance.
func NewMockShares(ctrl *gomock.Controller) *MockShares {
	mock := &MockShares{ctrl: ctrl}
	mock.recorder = &MockSharesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShares) EXPECT() *MockSharesMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockShares) Delete(txn basedb.ReadWriter, pubKey []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", txn, pubKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSharesMockRecorder) Delete(txn, pubKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockShares)(nil).Delete), txn, pubKey)
}

// Drop mocks base method.
func (m *MockShares) Drop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Drop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Drop indicates an expected call of Drop.
func (mr *MockSharesMockRecorder) Drop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drop", reflect.TypeOf((*MockShares)(nil).Drop))
}

// Get mocks base method.
func (m *MockShares) Get(txn basedb.Reader, pubKey []byte) (*types0.SSVShare, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", txn, pubKey)
	ret0, _ := ret[0].(*types0.SSVShare)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSharesMockRecorder) Get(txn, pubKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockShares)(nil).Get), txn, pubKey)
}

// List mocks base method.
func (m *MockShares) List(txn basedb.Reader, filters ...storage.SharesFilter) []*types0.SSVShare {
	m.ctrl.T.Helper()
	varargs := []any{txn}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*types0.SSVShare)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockSharesMockRecorder) List(txn any, filters ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{txn}, filters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockShares)(nil).List), varargs...)
}

// Range mocks base method.
func (m *MockShares) Range(txn basedb.Reader, fn func(*types0.SSVShare) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Range", txn, fn)
}

// Range indicates an expected call of Range.
func (mr *MockSharesMockRecorder) Range(txn, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Range", reflect.TypeOf((*MockShares)(nil).Range), txn, fn)
}

// Save mocks base method.
func (m *MockShares) Save(txn basedb.ReadWriter, shares ...*types0.SSVShare) error {
	m.ctrl.T.Helper()
	varargs := []any{txn}
	for _, a := range shares {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Save", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSharesMockRecorder) Save(txn any, shares ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{txn}, shares...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockShares)(nil).Save), varargs...)
}

// UpdateValidatorsMetadata mocks base method.
func (m *MockShares) UpdateValidatorsMetadata(arg0 map[types.ValidatorPK]*beacon.ValidatorMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateValidatorsMetadata", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateValidatorsMetadata indicates an expected call of UpdateValidatorsMetadata.
func (mr *MockSharesMockRecorder) UpdateValidatorsMetadata(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateValidatorsMetadata", reflect.TypeOf((*MockShares)(nil).UpdateValidatorsMetadata), arg0)
}
