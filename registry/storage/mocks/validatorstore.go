// Code generated by MockGen. DO NOT EDIT.
// Source: ./validator_indices.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=./mocks/validatorstore.go -source=./validator_indices.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	phase0 "github.com/attestantio/go-eth2-client/spec/phase0"
	types "github.com/ssvlabs/ssv-spec/types"
	types0 "github.com/ssvlabs/ssv/protocol/v2/types"
	storage "github.com/ssvlabs/ssv/registry/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockBaseValidatorIndices is a mock of BaseValidatorIndices interface.
type MockBaseValidatorIndices struct {
	ctrl     *gomock.Controller
	recorder *MockBaseValidatorIndicesMockRecorder
	isgomock struct{}
}

// MockBaseValidatorIndicesMockRecorder is the mock recorder for MockBaseValidatorIndices.
type MockBaseValidatorIndicesMockRecorder struct {
	mock *MockBaseValidatorIndices
}

// NewMockBaseValidatorIndices creates a new mock instance.
func NewMockBaseValidatorIndices(ctrl *gomock.Controller) *MockBaseValidatorIndices {
	mock := &MockBaseValidatorIndices{ctrl: ctrl}
	mock.recorder = &MockBaseValidatorIndicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseValidatorIndices) EXPECT() *MockBaseValidatorIndicesMockRecorder {
	return m.recorder
}

// Committee mocks base method.
func (m *MockBaseValidatorIndices) Committee(id types.CommitteeID) (*storage.IndexedCommittee, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Committee", id)
	ret0, _ := ret[0].(*storage.IndexedCommittee)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Committee indicates an expected call of Committee.
func (mr *MockBaseValidatorIndicesMockRecorder) Committee(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Committee", reflect.TypeOf((*MockBaseValidatorIndices)(nil).Committee), id)
}

// Committees mocks base method.
func (m *MockBaseValidatorIndices) Committees() []*storage.IndexedCommittee {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Committees")
	ret0, _ := ret[0].([]*storage.IndexedCommittee)
	return ret0
}

// Committees indicates an expected call of Committees.
func (mr *MockBaseValidatorIndicesMockRecorder) Committees() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Committees", reflect.TypeOf((*MockBaseValidatorIndices)(nil).Committees))
}

// OperatorCommittees mocks base method.
func (m *MockBaseValidatorIndices) OperatorCommittees(id types.OperatorID) []*storage.IndexedCommittee {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperatorCommittees", id)
	ret0, _ := ret[0].([]*storage.IndexedCommittee)
	return ret0
}

// OperatorCommittees indicates an expected call of OperatorCommittees.
func (mr *MockBaseValidatorIndicesMockRecorder) OperatorCommittees(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatorCommittees", reflect.TypeOf((*MockBaseValidatorIndices)(nil).OperatorCommittees), id)
}

// OperatorValidators mocks base method.
func (m *MockBaseValidatorIndices) OperatorValidators(id types.OperatorID) []*types0.SSVShare {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperatorValidators", id)
	ret0, _ := ret[0].([]*types0.SSVShare)
	return ret0
}

// OperatorValidators indicates an expected call of OperatorValidators.
func (mr *MockBaseValidatorIndicesMockRecorder) OperatorValidators(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatorValidators", reflect.TypeOf((*MockBaseValidatorIndices)(nil).OperatorValidators), id)
}

// ParticipatingCommittees mocks base method.
func (m *MockBaseValidatorIndices) ParticipatingCommittees(epoch phase0.Epoch) []*storage.IndexedCommittee {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParticipatingCommittees", epoch)
	ret0, _ := ret[0].([]*storage.IndexedCommittee)
	return ret0
}

// ParticipatingCommittees indicates an expected call of ParticipatingCommittees.
func (mr *MockBaseValidatorIndicesMockRecorder) ParticipatingCommittees(epoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParticipatingCommittees", reflect.TypeOf((*MockBaseValidatorIndices)(nil).ParticipatingCommittees), epoch)
}

// ParticipatingValidators mocks base method.
func (m *MockBaseValidatorIndices) ParticipatingValidators(epoch phase0.Epoch) []*types0.SSVShare {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParticipatingValidators", epoch)
	ret0, _ := ret[0].([]*types0.SSVShare)
	return ret0
}

// ParticipatingValidators indicates an expected call of ParticipatingValidators.
func (mr *MockBaseValidatorIndicesMockRecorder) ParticipatingValidators(epoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParticipatingValidators", reflect.TypeOf((*MockBaseValidatorIndices)(nil).ParticipatingValidators), epoch)
}

// Validator mocks base method.
func (m *MockBaseValidatorIndices) Validator(pubKey []byte) (*types0.SSVShare, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validator", pubKey)
	ret0, _ := ret[0].(*types0.SSVShare)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Validator indicates an expected call of Validator.
func (mr *MockBaseValidatorIndicesMockRecorder) Validator(pubKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validator", reflect.TypeOf((*MockBaseValidatorIndices)(nil).Validator), pubKey)
}

// ValidatorByIndex mocks base method.
func (m *MockBaseValidatorIndices) ValidatorByIndex(index phase0.ValidatorIndex) (*types0.SSVShare, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatorByIndex", index)
	ret0, _ := ret[0].(*types0.SSVShare)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ValidatorByIndex indicates an expected call of ValidatorByIndex.
func (mr *MockBaseValidatorIndicesMockRecorder) ValidatorByIndex(index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatorByIndex", reflect.TypeOf((*MockBaseValidatorIndices)(nil).ValidatorByIndex), index)
}

// Validators mocks base method.
func (m *MockBaseValidatorIndices) Validators() []*types0.SSVShare {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validators")
	ret0, _ := ret[0].([]*types0.SSVShare)
	return ret0
}

// Validators indicates an expected call of Validators.
func (mr *MockBaseValidatorIndicesMockRecorder) Validators() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validators", reflect.TypeOf((*MockBaseValidatorIndices)(nil).Validators))
}

// MockValidatorIndices is a mock of ValidatorIndices interface.
type MockValidatorIndices struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorIndicesMockRecorder
	isgomock struct{}
}

// MockValidatorIndicesMockRecorder is the mock recorder for MockValidatorIndices.
type MockValidatorIndicesMockRecorder struct {
	mock *MockValidatorIndices
}

// NewMockValidatorIndices creates a new mock instance.
func NewMockValidatorIndices(ctrl *gomock.Controller) *MockValidatorIndices {
	mock := &MockValidatorIndices{ctrl: ctrl}
	mock.recorder = &MockValidatorIndicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidatorIndices) EXPECT() *MockValidatorIndicesMockRecorder {
	return m.recorder
}

// Committee mocks base method.
func (m *MockValidatorIndices) Committee(id types.CommitteeID) (*storage.IndexedCommittee, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Committee", id)
	ret0, _ := ret[0].(*storage.IndexedCommittee)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Committee indicates an expected call of Committee.
func (mr *MockValidatorIndicesMockRecorder) Committee(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Committee", reflect.TypeOf((*MockValidatorIndices)(nil).Committee), id)
}

// Committees mocks base method.
func (m *MockValidatorIndices) Committees() []*storage.IndexedCommittee {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Committees")
	ret0, _ := ret[0].([]*storage.IndexedCommittee)
	return ret0
}

// Committees indicates an expected call of Committees.
func (mr *MockValidatorIndicesMockRecorder) Committees() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Committees", reflect.TypeOf((*MockValidatorIndices)(nil).Committees))
}

// OperatorCommittees mocks base method.
func (m *MockValidatorIndices) OperatorCommittees(id types.OperatorID) []*storage.IndexedCommittee {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperatorCommittees", id)
	ret0, _ := ret[0].([]*storage.IndexedCommittee)
	return ret0
}

// OperatorCommittees indicates an expected call of OperatorCommittees.
func (mr *MockValidatorIndicesMockRecorder) OperatorCommittees(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatorCommittees", reflect.TypeOf((*MockValidatorIndices)(nil).OperatorCommittees), id)
}

// OperatorValidators mocks base method.
func (m *MockValidatorIndices) OperatorValidators(id types.OperatorID) []*types0.SSVShare {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperatorValidators", id)
	ret0, _ := ret[0].([]*types0.SSVShare)
	return ret0
}

// OperatorValidators indicates an expected call of OperatorValidators.
func (mr *MockValidatorIndicesMockRecorder) OperatorValidators(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatorValidators", reflect.TypeOf((*MockValidatorIndices)(nil).OperatorValidators), id)
}

// ParticipatingCommittees mocks base method.
func (m *MockValidatorIndices) ParticipatingCommittees(epoch phase0.Epoch) []*storage.IndexedCommittee {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParticipatingCommittees", epoch)
	ret0, _ := ret[0].([]*storage.IndexedCommittee)
	return ret0
}

// ParticipatingCommittees indicates an expected call of ParticipatingCommittees.
func (mr *MockValidatorIndicesMockRecorder) ParticipatingCommittees(epoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParticipatingCommittees", reflect.TypeOf((*MockValidatorIndices)(nil).ParticipatingCommittees), epoch)
}

// ParticipatingValidators mocks base method.
func (m *MockValidatorIndices) ParticipatingValidators(epoch phase0.Epoch) []*types0.SSVShare {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParticipatingValidators", epoch)
	ret0, _ := ret[0].([]*types0.SSVShare)
	return ret0
}

// ParticipatingValidators indicates an expected call of ParticipatingValidators.
func (mr *MockValidatorIndicesMockRecorder) ParticipatingValidators(epoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParticipatingValidators", reflect.TypeOf((*MockValidatorIndices)(nil).ParticipatingValidators), epoch)
}

// Validator mocks base method.
func (m *MockValidatorIndices) Validator(pubKey []byte) (*types0.SSVShare, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validator", pubKey)
	ret0, _ := ret[0].(*types0.SSVShare)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Validator indicates an expected call of Validator.
func (mr *MockValidatorIndicesMockRecorder) Validator(pubKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validator", reflect.TypeOf((*MockValidatorIndices)(nil).Validator), pubKey)
}

// ValidatorByIndex mocks base method.
func (m *MockValidatorIndices) ValidatorByIndex(index phase0.ValidatorIndex) (*types0.SSVShare, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatorByIndex", index)
	ret0, _ := ret[0].(*types0.SSVShare)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ValidatorByIndex indicates an expected call of ValidatorByIndex.
func (mr *MockValidatorIndicesMockRecorder) ValidatorByIndex(index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatorByIndex", reflect.TypeOf((*MockValidatorIndices)(nil).ValidatorByIndex), index)
}

// Validators mocks base method.
func (m *MockValidatorIndices) Validators() []*types0.SSVShare {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validators")
	ret0, _ := ret[0].([]*types0.SSVShare)
	return ret0
}

// Validators indicates an expected call of Validators.
func (mr *MockValidatorIndicesMockRecorder) Validators() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validators", reflect.TypeOf((*MockValidatorIndices)(nil).Validators))
}

// WithOperatorID mocks base method.
func (m *MockValidatorIndices) WithOperatorID(operatorID func() types.OperatorID) storage.SelfValidatorIndices {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithOperatorID", operatorID)
	ret0, _ := ret[0].(storage.SelfValidatorIndices)
	return ret0
}

// WithOperatorID indicates an expected call of WithOperatorID.
func (mr *MockValidatorIndicesMockRecorder) WithOperatorID(operatorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithOperatorID", reflect.TypeOf((*MockValidatorIndices)(nil).WithOperatorID), operatorID)
}

// MockSelfValidatorIndices is a mock of SelfValidatorIndices interface.
type MockSelfValidatorIndices struct {
	ctrl     *gomock.Controller
	recorder *MockSelfValidatorIndicesMockRecorder
	isgomock struct{}
}

// MockSelfValidatorIndicesMockRecorder is the mock recorder for MockSelfValidatorIndices.
type MockSelfValidatorIndicesMockRecorder struct {
	mock *MockSelfValidatorIndices
}

// NewMockSelfValidatorIndices creates a new mock instance.
func NewMockSelfValidatorIndices(ctrl *gomock.Controller) *MockSelfValidatorIndices {
	mock := &MockSelfValidatorIndices{ctrl: ctrl}
	mock.recorder = &MockSelfValidatorIndicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSelfValidatorIndices) EXPECT() *MockSelfValidatorIndicesMockRecorder {
	return m.recorder
}

// Committee mocks base method.
func (m *MockSelfValidatorIndices) Committee(id types.CommitteeID) (*storage.IndexedCommittee, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Committee", id)
	ret0, _ := ret[0].(*storage.IndexedCommittee)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Committee indicates an expected call of Committee.
func (mr *MockSelfValidatorIndicesMockRecorder) Committee(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Committee", reflect.TypeOf((*MockSelfValidatorIndices)(nil).Committee), id)
}

// Committees mocks base method.
func (m *MockSelfValidatorIndices) Committees() []*storage.IndexedCommittee {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Committees")
	ret0, _ := ret[0].([]*storage.IndexedCommittee)
	return ret0
}

// Committees indicates an expected call of Committees.
func (mr *MockSelfValidatorIndicesMockRecorder) Committees() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Committees", reflect.TypeOf((*MockSelfValidatorIndices)(nil).Committees))
}

// OperatorCommittees mocks base method.
func (m *MockSelfValidatorIndices) OperatorCommittees(id types.OperatorID) []*storage.IndexedCommittee {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperatorCommittees", id)
	ret0, _ := ret[0].([]*storage.IndexedCommittee)
	return ret0
}

// OperatorCommittees indicates an expected call of OperatorCommittees.
func (mr *MockSelfValidatorIndicesMockRecorder) OperatorCommittees(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatorCommittees", reflect.TypeOf((*MockSelfValidatorIndices)(nil).OperatorCommittees), id)
}

// OperatorValidators mocks base method.
func (m *MockSelfValidatorIndices) OperatorValidators(id types.OperatorID) []*types0.SSVShare {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperatorValidators", id)
	ret0, _ := ret[0].([]*types0.SSVShare)
	return ret0
}

// OperatorValidators indicates an expected call of OperatorValidators.
func (mr *MockSelfValidatorIndicesMockRecorder) OperatorValidators(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatorValidators", reflect.TypeOf((*MockSelfValidatorIndices)(nil).OperatorValidators), id)
}

// ParticipatingCommittees mocks base method.
func (m *MockSelfValidatorIndices) ParticipatingCommittees(epoch phase0.Epoch) []*storage.IndexedCommittee {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParticipatingCommittees", epoch)
	ret0, _ := ret[0].([]*storage.IndexedCommittee)
	return ret0
}

// ParticipatingCommittees indicates an expected call of ParticipatingCommittees.
func (mr *MockSelfValidatorIndicesMockRecorder) ParticipatingCommittees(epoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParticipatingCommittees", reflect.TypeOf((*MockSelfValidatorIndices)(nil).ParticipatingCommittees), epoch)
}

// ParticipatingValidators mocks base method.
func (m *MockSelfValidatorIndices) ParticipatingValidators(epoch phase0.Epoch) []*types0.SSVShare {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParticipatingValidators", epoch)
	ret0, _ := ret[0].([]*types0.SSVShare)
	return ret0
}

// ParticipatingValidators indicates an expected call of ParticipatingValidators.
func (mr *MockSelfValidatorIndicesMockRecorder) ParticipatingValidators(epoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParticipatingValidators", reflect.TypeOf((*MockSelfValidatorIndices)(nil).ParticipatingValidators), epoch)
}

// SelfCommittees mocks base method.
func (m *MockSelfValidatorIndices) SelfCommittees() []*storage.IndexedCommittee {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfCommittees")
	ret0, _ := ret[0].([]*storage.IndexedCommittee)
	return ret0
}

// SelfCommittees indicates an expected call of SelfCommittees.
func (mr *MockSelfValidatorIndicesMockRecorder) SelfCommittees() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfCommittees", reflect.TypeOf((*MockSelfValidatorIndices)(nil).SelfCommittees))
}

// SelfParticipatingCommittees mocks base method.
func (m *MockSelfValidatorIndices) SelfParticipatingCommittees(arg0 phase0.Epoch) []*storage.IndexedCommittee {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfParticipatingCommittees", arg0)
	ret0, _ := ret[0].([]*storage.IndexedCommittee)
	return ret0
}

// SelfParticipatingCommittees indicates an expected call of SelfParticipatingCommittees.
func (mr *MockSelfValidatorIndicesMockRecorder) SelfParticipatingCommittees(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfParticipatingCommittees", reflect.TypeOf((*MockSelfValidatorIndices)(nil).SelfParticipatingCommittees), arg0)
}

// SelfParticipatingValidators mocks base method.
func (m *MockSelfValidatorIndices) SelfParticipatingValidators(arg0 phase0.Epoch) []*types0.SSVShare {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfParticipatingValidators", arg0)
	ret0, _ := ret[0].([]*types0.SSVShare)
	return ret0
}

// SelfParticipatingValidators indicates an expected call of SelfParticipatingValidators.
func (mr *MockSelfValidatorIndicesMockRecorder) SelfParticipatingValidators(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfParticipatingValidators", reflect.TypeOf((*MockSelfValidatorIndices)(nil).SelfParticipatingValidators), arg0)
}

// SelfValidators mocks base method.
func (m *MockSelfValidatorIndices) SelfValidators() []*types0.SSVShare {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfValidators")
	ret0, _ := ret[0].([]*types0.SSVShare)
	return ret0
}

// SelfValidators indicates an expected call of SelfValidators.
func (mr *MockSelfValidatorIndicesMockRecorder) SelfValidators() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfValidators", reflect.TypeOf((*MockSelfValidatorIndices)(nil).SelfValidators))
}

// Validator mocks base method.
func (m *MockSelfValidatorIndices) Validator(pubKey []byte) (*types0.SSVShare, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validator", pubKey)
	ret0, _ := ret[0].(*types0.SSVShare)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Validator indicates an expected call of Validator.
func (mr *MockSelfValidatorIndicesMockRecorder) Validator(pubKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validator", reflect.TypeOf((*MockSelfValidatorIndices)(nil).Validator), pubKey)
}

// ValidatorByIndex mocks base method.
func (m *MockSelfValidatorIndices) ValidatorByIndex(index phase0.ValidatorIndex) (*types0.SSVShare, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatorByIndex", index)
	ret0, _ := ret[0].(*types0.SSVShare)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ValidatorByIndex indicates an expected call of ValidatorByIndex.
func (mr *MockSelfValidatorIndicesMockRecorder) ValidatorByIndex(index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatorByIndex", reflect.TypeOf((*MockSelfValidatorIndices)(nil).ValidatorByIndex), index)
}

// Validators mocks base method.
func (m *MockSelfValidatorIndices) Validators() []*types0.SSVShare {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validators")
	ret0, _ := ret[0].([]*types0.SSVShare)
	return ret0
}

// Validators indicates an expected call of Validators.
func (mr *MockSelfValidatorIndicesMockRecorder) Validators() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validators", reflect.TypeOf((*MockSelfValidatorIndices)(nil).Validators))
}
