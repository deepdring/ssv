// Code generated by MockGen. DO NOT EDIT.
// Source: ./doppelganger.go
//
// Generated by this command:
//
//	mockgen -package=doppelganger -destination=./doppelganger_mock.go -source=./doppelganger.go
//

// Package doppelganger is a generated GoMock package.
package doppelganger

import (
	context "context"
	reflect "reflect"

	v1 "github.com/attestantio/go-eth2-client/api/v1"
	phase0 "github.com/attestantio/go-eth2-client/spec/phase0"
	types "github.com/ssvlabs/ssv/protocol/v2/types"
	gomock "go.uber.org/mock/gomock"
)

// MockDoppelgangerProvider is a mock of DoppelgangerProvider interface.
type MockDoppelgangerProvider struct {
	ctrl     *gomock.Controller
	recorder *MockDoppelgangerProviderMockRecorder
}

// MockDoppelgangerProviderMockRecorder is the mock recorder for MockDoppelgangerProvider.
type MockDoppelgangerProviderMockRecorder struct {
	mock *MockDoppelgangerProvider
}

// NewMockDoppelgangerProvider creates a new mock instance.
func NewMockDoppelgangerProvider(ctrl *gomock.Controller) *MockDoppelgangerProvider {
	mock := &MockDoppelgangerProvider{ctrl: ctrl}
	mock.recorder = &MockDoppelgangerProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDoppelgangerProvider) EXPECT() *MockDoppelgangerProviderMockRecorder {
	return m.recorder
}

// MarkAsSafe mocks base method.
func (m *MockDoppelgangerProvider) MarkAsSafe(validatorIndex phase0.ValidatorIndex) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkAsSafe", validatorIndex)
}

// MarkAsSafe indicates an expected call of MarkAsSafe.
func (mr *MockDoppelgangerProviderMockRecorder) MarkAsSafe(validatorIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsSafe", reflect.TypeOf((*MockDoppelgangerProvider)(nil).MarkAsSafe), validatorIndex)
}

// StartMonitoring mocks base method.
func (m *MockDoppelgangerProvider) StartMonitoring(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartMonitoring", ctx)
}

// StartMonitoring indicates an expected call of StartMonitoring.
func (mr *MockDoppelgangerProviderMockRecorder) StartMonitoring(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMonitoring", reflect.TypeOf((*MockDoppelgangerProvider)(nil).StartMonitoring), ctx)
}

// ValidatorStatus mocks base method.
func (m *MockDoppelgangerProvider) ValidatorStatus(validatorIndex phase0.ValidatorIndex) DoppelgangerStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatorStatus", validatorIndex)
	ret0, _ := ret[0].(DoppelgangerStatus)
	return ret0
}

// ValidatorStatus indicates an expected call of ValidatorStatus.
func (mr *MockDoppelgangerProviderMockRecorder) ValidatorStatus(validatorIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatorStatus", reflect.TypeOf((*MockDoppelgangerProvider)(nil).ValidatorStatus), validatorIndex)
}

// MockValidatorProvider is a mock of ValidatorProvider interface.
type MockValidatorProvider struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorProviderMockRecorder
}

// MockValidatorProviderMockRecorder is the mock recorder for MockValidatorProvider.
type MockValidatorProviderMockRecorder struct {
	mock *MockValidatorProvider
}

// NewMockValidatorProvider creates a new mock instance.
func NewMockValidatorProvider(ctrl *gomock.Controller) *MockValidatorProvider {
	mock := &MockValidatorProvider{ctrl: ctrl}
	mock.recorder = &MockValidatorProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidatorProvider) EXPECT() *MockValidatorProviderMockRecorder {
	return m.recorder
}

// SelfParticipatingValidators mocks base method.
func (m *MockValidatorProvider) SelfParticipatingValidators(epoch phase0.Epoch) []*types.SSVShare {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfParticipatingValidators", epoch)
	ret0, _ := ret[0].([]*types.SSVShare)
	return ret0
}

// SelfParticipatingValidators indicates an expected call of SelfParticipatingValidators.
func (mr *MockValidatorProviderMockRecorder) SelfParticipatingValidators(epoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfParticipatingValidators", reflect.TypeOf((*MockValidatorProvider)(nil).SelfParticipatingValidators), epoch)
}

// MockBeaconNode is a mock of BeaconNode interface.
type MockBeaconNode struct {
	ctrl     *gomock.Controller
	recorder *MockBeaconNodeMockRecorder
}

// MockBeaconNodeMockRecorder is the mock recorder for MockBeaconNode.
type MockBeaconNodeMockRecorder struct {
	mock *MockBeaconNode
}

// NewMockBeaconNode creates a new mock instance.
func NewMockBeaconNode(ctrl *gomock.Controller) *MockBeaconNode {
	mock := &MockBeaconNode{ctrl: ctrl}
	mock.recorder = &MockBeaconNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeaconNode) EXPECT() *MockBeaconNodeMockRecorder {
	return m.recorder
}

// ValidatorLiveness mocks base method.
func (m *MockBeaconNode) ValidatorLiveness(ctx context.Context, epoch phase0.Epoch, validatorIndices []phase0.ValidatorIndex) ([]*v1.ValidatorLiveness, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatorLiveness", ctx, epoch, validatorIndices)
	ret0, _ := ret[0].([]*v1.ValidatorLiveness)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidatorLiveness indicates an expected call of ValidatorLiveness.
func (mr *MockBeaconNodeMockRecorder) ValidatorLiveness(ctx, epoch, validatorIndices any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatorLiveness", reflect.TypeOf((*MockBeaconNode)(nil).ValidatorLiveness), ctx, epoch, validatorIndices)
}
