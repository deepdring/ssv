// Code generated by MockGen. DO NOT EDIT.
// Source: ./config.go
//
// Generated by this command:
//
//	mockgen -package=networkconfig -destination=./mock.go -source=./config.go
//

// Package networkconfig is a generated GoMock package.
package networkconfig

import (
	reflect "reflect"
	time "time"

	phase0 "github.com/attestantio/go-eth2-client/spec/phase0"
	types "github.com/ssvlabs/ssv-spec/types"
	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
	isgomock struct{}
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// BeaconNetwork mocks base method.
func (m *MockInterface) BeaconNetwork() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeaconNetwork")
	ret0, _ := ret[0].(string)
	return ret0
}

// BeaconNetwork indicates an expected call of BeaconNetwork.
func (mr *MockInterfaceMockRecorder) BeaconNetwork() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeaconNetwork", reflect.TypeOf((*MockInterface)(nil).BeaconNetwork))
}

// DomainType mocks base method.
func (m *MockInterface) DomainType() types.DomainType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainType")
	ret0, _ := ret[0].(types.DomainType)
	return ret0
}

// DomainType indicates an expected call of DomainType.
func (mr *MockInterfaceMockRecorder) DomainType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainType", reflect.TypeOf((*MockInterface)(nil).DomainType))
}

// EpochStartTime mocks base method.
func (m *MockInterface) EpochStartTime(epoch phase0.Epoch) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EpochStartTime", epoch)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// EpochStartTime indicates an expected call of EpochStartTime.
func (mr *MockInterfaceMockRecorder) EpochStartTime(epoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EpochStartTime", reflect.TypeOf((*MockInterface)(nil).EpochStartTime), epoch)
}

// EstimatedCurrentEpoch mocks base method.
func (m *MockInterface) EstimatedCurrentEpoch() phase0.Epoch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimatedCurrentEpoch")
	ret0, _ := ret[0].(phase0.Epoch)
	return ret0
}

// EstimatedCurrentEpoch indicates an expected call of EstimatedCurrentEpoch.
func (mr *MockInterfaceMockRecorder) EstimatedCurrentEpoch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimatedCurrentEpoch", reflect.TypeOf((*MockInterface)(nil).EstimatedCurrentEpoch))
}

// EstimatedCurrentSlot mocks base method.
func (m *MockInterface) EstimatedCurrentSlot() phase0.Slot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimatedCurrentSlot")
	ret0, _ := ret[0].(phase0.Slot)
	return ret0
}

// EstimatedCurrentSlot indicates an expected call of EstimatedCurrentSlot.
func (mr *MockInterfaceMockRecorder) EstimatedCurrentSlot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimatedCurrentSlot", reflect.TypeOf((*MockInterface)(nil).EstimatedCurrentSlot))
}

// EstimatedEpochAtSlot mocks base method.
func (m *MockInterface) EstimatedEpochAtSlot(slot phase0.Slot) phase0.Epoch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimatedEpochAtSlot", slot)
	ret0, _ := ret[0].(phase0.Epoch)
	return ret0
}

// EstimatedEpochAtSlot indicates an expected call of EstimatedEpochAtSlot.
func (mr *MockInterfaceMockRecorder) EstimatedEpochAtSlot(slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimatedEpochAtSlot", reflect.TypeOf((*MockInterface)(nil).EstimatedEpochAtSlot), slot)
}

// EstimatedSlotAtTime mocks base method.
func (m *MockInterface) EstimatedSlotAtTime(time time.Time) phase0.Slot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimatedSlotAtTime", time)
	ret0, _ := ret[0].(phase0.Slot)
	return ret0
}

// EstimatedSlotAtTime indicates an expected call of EstimatedSlotAtTime.
func (mr *MockInterfaceMockRecorder) EstimatedSlotAtTime(time any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimatedSlotAtTime", reflect.TypeOf((*MockInterface)(nil).EstimatedSlotAtTime), time)
}

// EstimatedSyncCommitteePeriodAtEpoch mocks base method.
func (m *MockInterface) EstimatedSyncCommitteePeriodAtEpoch(epoch phase0.Epoch) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimatedSyncCommitteePeriodAtEpoch", epoch)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// EstimatedSyncCommitteePeriodAtEpoch indicates an expected call of EstimatedSyncCommitteePeriodAtEpoch.
func (mr *MockInterfaceMockRecorder) EstimatedSyncCommitteePeriodAtEpoch(epoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimatedSyncCommitteePeriodAtEpoch", reflect.TypeOf((*MockInterface)(nil).EstimatedSyncCommitteePeriodAtEpoch), epoch)
}

// EstimatedTimeAtSlot mocks base method.
func (m *MockInterface) EstimatedTimeAtSlot(slot phase0.Slot) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimatedTimeAtSlot", slot)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// EstimatedTimeAtSlot indicates an expected call of EstimatedTimeAtSlot.
func (mr *MockInterfaceMockRecorder) EstimatedTimeAtSlot(slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimatedTimeAtSlot", reflect.TypeOf((*MockInterface)(nil).EstimatedTimeAtSlot), slot)
}

// FirstEpochOfSyncPeriod mocks base method.
func (m *MockInterface) FirstEpochOfSyncPeriod(period uint64) phase0.Epoch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstEpochOfSyncPeriod", period)
	ret0, _ := ret[0].(phase0.Epoch)
	return ret0
}

// FirstEpochOfSyncPeriod indicates an expected call of FirstEpochOfSyncPeriod.
func (mr *MockInterfaceMockRecorder) FirstEpochOfSyncPeriod(period any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstEpochOfSyncPeriod", reflect.TypeOf((*MockInterface)(nil).FirstEpochOfSyncPeriod), period)
}

// FirstSlotAtEpoch mocks base method.
func (m *MockInterface) FirstSlotAtEpoch(epoch phase0.Epoch) phase0.Slot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstSlotAtEpoch", epoch)
	ret0, _ := ret[0].(phase0.Slot)
	return ret0
}

// FirstSlotAtEpoch indicates an expected call of FirstSlotAtEpoch.
func (mr *MockInterfaceMockRecorder) FirstSlotAtEpoch(epoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstSlotAtEpoch", reflect.TypeOf((*MockInterface)(nil).FirstSlotAtEpoch), epoch)
}

// GenesisForkVersion mocks base method.
func (m *MockInterface) GenesisForkVersion() phase0.Version {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenesisForkVersion")
	ret0, _ := ret[0].(phase0.Version)
	return ret0
}

// GenesisForkVersion indicates an expected call of GenesisForkVersion.
func (mr *MockInterfaceMockRecorder) GenesisForkVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenesisForkVersion", reflect.TypeOf((*MockInterface)(nil).GenesisForkVersion))
}

// GenesisTime mocks base method.
func (m *MockInterface) GenesisTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenesisTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GenesisTime indicates an expected call of GenesisTime.
func (mr *MockInterfaceMockRecorder) GenesisTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenesisTime", reflect.TypeOf((*MockInterface)(nil).GenesisTime))
}

// GetEpochFirstSlot mocks base method.
func (m *MockInterface) GetEpochFirstSlot(epoch phase0.Epoch) phase0.Slot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpochFirstSlot", epoch)
	ret0, _ := ret[0].(phase0.Slot)
	return ret0
}

// GetEpochFirstSlot indicates an expected call of GetEpochFirstSlot.
func (mr *MockInterfaceMockRecorder) GetEpochFirstSlot(epoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpochFirstSlot", reflect.TypeOf((*MockInterface)(nil).GetEpochFirstSlot), epoch)
}

// GetSlotEndTime mocks base method.
func (m *MockInterface) GetSlotEndTime(slot phase0.Slot) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlotEndTime", slot)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetSlotEndTime indicates an expected call of GetSlotEndTime.
func (mr *MockInterfaceMockRecorder) GetSlotEndTime(slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlotEndTime", reflect.TypeOf((*MockInterface)(nil).GetSlotEndTime), slot)
}

// GetSlotStartTime mocks base method.
func (m *MockInterface) GetSlotStartTime(slot phase0.Slot) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlotStartTime", slot)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetSlotStartTime indicates an expected call of GetSlotStartTime.
func (mr *MockInterfaceMockRecorder) GetSlotStartTime(slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlotStartTime", reflect.TypeOf((*MockInterface)(nil).GetSlotStartTime), slot)
}

// IntervalDuration mocks base method.
func (m *MockInterface) IntervalDuration() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntervalDuration")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// IntervalDuration indicates an expected call of IntervalDuration.
func (mr *MockInterfaceMockRecorder) IntervalDuration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntervalDuration", reflect.TypeOf((*MockInterface)(nil).IntervalDuration))
}

// IsFirstSlotOfEpoch mocks base method.
func (m *MockInterface) IsFirstSlotOfEpoch(slot phase0.Slot) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFirstSlotOfEpoch", slot)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFirstSlotOfEpoch indicates an expected call of IsFirstSlotOfEpoch.
func (mr *MockInterfaceMockRecorder) IsFirstSlotOfEpoch(slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFirstSlotOfEpoch", reflect.TypeOf((*MockInterface)(nil).IsFirstSlotOfEpoch), slot)
}

// LastSlotOfSyncPeriod mocks base method.
func (m *MockInterface) LastSlotOfSyncPeriod(period uint64) phase0.Slot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastSlotOfSyncPeriod", period)
	ret0, _ := ret[0].(phase0.Slot)
	return ret0
}

// LastSlotOfSyncPeriod indicates an expected call of LastSlotOfSyncPeriod.
func (mr *MockInterfaceMockRecorder) LastSlotOfSyncPeriod(period any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastSlotOfSyncPeriod", reflect.TypeOf((*MockInterface)(nil).LastSlotOfSyncPeriod), period)
}

// SlotDuration mocks base method.
func (m *MockInterface) SlotDuration() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlotDuration")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// SlotDuration indicates an expected call of SlotDuration.
func (mr *MockInterfaceMockRecorder) SlotDuration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlotDuration", reflect.TypeOf((*MockInterface)(nil).SlotDuration))
}

// SlotsPerEpoch mocks base method.
func (m *MockInterface) SlotsPerEpoch() phase0.Slot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlotsPerEpoch")
	ret0, _ := ret[0].(phase0.Slot)
	return ret0
}

// SlotsPerEpoch indicates an expected call of SlotsPerEpoch.
func (mr *MockInterfaceMockRecorder) SlotsPerEpoch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlotsPerEpoch", reflect.TypeOf((*MockInterface)(nil).SlotsPerEpoch))
}

// SlotsPerPeriod mocks base method.
func (m *MockInterface) SlotsPerPeriod() phase0.Slot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlotsPerPeriod")
	ret0, _ := ret[0].(phase0.Slot)
	return ret0
}

// SlotsPerPeriod indicates an expected call of SlotsPerPeriod.
func (mr *MockInterfaceMockRecorder) SlotsPerPeriod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlotsPerPeriod", reflect.TypeOf((*MockInterface)(nil).SlotsPerPeriod))
}

// SyncCommitteeSize mocks base method.
func (m *MockInterface) SyncCommitteeSize() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncCommitteeSize")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// SyncCommitteeSize indicates an expected call of SyncCommitteeSize.
func (mr *MockInterfaceMockRecorder) SyncCommitteeSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncCommitteeSize", reflect.TypeOf((*MockInterface)(nil).SyncCommitteeSize))
}
