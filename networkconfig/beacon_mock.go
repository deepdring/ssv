// Code generated by MockGen. DO NOT EDIT.
// Source: ./beacon.go
//
// Generated by this command:
//
//	mockgen -package=networkconfig -destination=./beacon_mock.go -source=./beacon.go
//

// Package networkconfig is a generated GoMock package.
package networkconfig

import (
	reflect "reflect"
	time "time"

	spec "github.com/attestantio/go-eth2-client/spec"
	phase0 "github.com/attestantio/go-eth2-client/spec/phase0"
	gomock "go.uber.org/mock/gomock"
)

// MockBeacon is a mock of Beacon interface.
type MockBeacon struct {
	ctrl     *gomock.Controller
	recorder *MockBeaconMockRecorder
	isgomock struct{}
}

// MockBeaconMockRecorder is the mock recorder for MockBeacon.
type MockBeaconMockRecorder struct {
	mock *MockBeacon
}

// NewMockBeacon creates a new mock instance.
func NewMockBeacon(ctrl *gomock.Controller) *MockBeacon {
	mock := &MockBeacon{ctrl: ctrl}
	mock.recorder = &MockBeaconMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeacon) EXPECT() *MockBeaconMockRecorder {
	return m.recorder
}

// EpochDuration mocks base method.
func (m *MockBeacon) EpochDuration() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EpochDuration")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// EpochDuration indicates an expected call of EpochDuration.
func (mr *MockBeaconMockRecorder) EpochDuration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EpochDuration", reflect.TypeOf((*MockBeacon)(nil).EpochDuration))
}

// EpochFirstSlot mocks base method.
func (m *MockBeacon) EpochFirstSlot(epoch phase0.Epoch) phase0.Slot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EpochFirstSlot", epoch)
	ret0, _ := ret[0].(phase0.Slot)
	return ret0
}

// EpochFirstSlot indicates an expected call of EpochFirstSlot.
func (mr *MockBeaconMockRecorder) EpochFirstSlot(epoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EpochFirstSlot", reflect.TypeOf((*MockBeacon)(nil).EpochFirstSlot), epoch)
}

// EpochStartTime mocks base method.
func (m *MockBeacon) EpochStartTime(epoch phase0.Epoch) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EpochStartTime", epoch)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// EpochStartTime indicates an expected call of EpochStartTime.
func (mr *MockBeaconMockRecorder) EpochStartTime(epoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EpochStartTime", reflect.TypeOf((*MockBeacon)(nil).EpochStartTime), epoch)
}

// EpochsPerSyncCommitteePeriod mocks base method.
func (m *MockBeacon) EpochsPerSyncCommitteePeriod() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EpochsPerSyncCommitteePeriod")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// EpochsPerSyncCommitteePeriod indicates an expected call of EpochsPerSyncCommitteePeriod.
func (mr *MockBeaconMockRecorder) EpochsPerSyncCommitteePeriod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EpochsPerSyncCommitteePeriod", reflect.TypeOf((*MockBeacon)(nil).EpochsPerSyncCommitteePeriod))
}

// EstimatedCurrentEpoch mocks base method.
func (m *MockBeacon) EstimatedCurrentEpoch() phase0.Epoch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimatedCurrentEpoch")
	ret0, _ := ret[0].(phase0.Epoch)
	return ret0
}

// EstimatedCurrentEpoch indicates an expected call of EstimatedCurrentEpoch.
func (mr *MockBeaconMockRecorder) EstimatedCurrentEpoch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimatedCurrentEpoch", reflect.TypeOf((*MockBeacon)(nil).EstimatedCurrentEpoch))
}

// EstimatedCurrentSlot mocks base method.
func (m *MockBeacon) EstimatedCurrentSlot() phase0.Slot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimatedCurrentSlot")
	ret0, _ := ret[0].(phase0.Slot)
	return ret0
}

// EstimatedCurrentSlot indicates an expected call of EstimatedCurrentSlot.
func (mr *MockBeaconMockRecorder) EstimatedCurrentSlot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimatedCurrentSlot", reflect.TypeOf((*MockBeacon)(nil).EstimatedCurrentSlot))
}

// EstimatedEpochAtSlot mocks base method.
func (m *MockBeacon) EstimatedEpochAtSlot(slot phase0.Slot) phase0.Epoch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimatedEpochAtSlot", slot)
	ret0, _ := ret[0].(phase0.Epoch)
	return ret0
}

// EstimatedEpochAtSlot indicates an expected call of EstimatedEpochAtSlot.
func (mr *MockBeaconMockRecorder) EstimatedEpochAtSlot(slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimatedEpochAtSlot", reflect.TypeOf((*MockBeacon)(nil).EstimatedEpochAtSlot), slot)
}

// EstimatedSlotAtTime mocks base method.
func (m *MockBeacon) EstimatedSlotAtTime(arg0 time.Time) phase0.Slot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimatedSlotAtTime", arg0)
	ret0, _ := ret[0].(phase0.Slot)
	return ret0
}

// EstimatedSlotAtTime indicates an expected call of EstimatedSlotAtTime.
func (mr *MockBeaconMockRecorder) EstimatedSlotAtTime(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimatedSlotAtTime", reflect.TypeOf((*MockBeacon)(nil).EstimatedSlotAtTime), arg0)
}

// EstimatedSyncCommitteePeriodAtEpoch mocks base method.
func (m *MockBeacon) EstimatedSyncCommitteePeriodAtEpoch(epoch phase0.Epoch) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimatedSyncCommitteePeriodAtEpoch", epoch)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// EstimatedSyncCommitteePeriodAtEpoch indicates an expected call of EstimatedSyncCommitteePeriodAtEpoch.
func (mr *MockBeaconMockRecorder) EstimatedSyncCommitteePeriodAtEpoch(epoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimatedSyncCommitteePeriodAtEpoch", reflect.TypeOf((*MockBeacon)(nil).EstimatedSyncCommitteePeriodAtEpoch), epoch)
}

// EstimatedTimeAtSlot mocks base method.
func (m *MockBeacon) EstimatedTimeAtSlot(slot phase0.Slot) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimatedTimeAtSlot", slot)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// EstimatedTimeAtSlot indicates an expected call of EstimatedTimeAtSlot.
func (mr *MockBeaconMockRecorder) EstimatedTimeAtSlot(slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimatedTimeAtSlot", reflect.TypeOf((*MockBeacon)(nil).EstimatedTimeAtSlot), slot)
}

// FirstEpochOfSyncPeriod mocks base method.
func (m *MockBeacon) FirstEpochOfSyncPeriod(period uint64) phase0.Epoch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstEpochOfSyncPeriod", period)
	ret0, _ := ret[0].(phase0.Epoch)
	return ret0
}

// FirstEpochOfSyncPeriod indicates an expected call of FirstEpochOfSyncPeriod.
func (mr *MockBeaconMockRecorder) FirstEpochOfSyncPeriod(period any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstEpochOfSyncPeriod", reflect.TypeOf((*MockBeacon)(nil).FirstEpochOfSyncPeriod), period)
}

// FirstSlotAtEpoch mocks base method.
func (m *MockBeacon) FirstSlotAtEpoch(epoch phase0.Epoch) phase0.Slot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstSlotAtEpoch", epoch)
	ret0, _ := ret[0].(phase0.Slot)
	return ret0
}

// FirstSlotAtEpoch indicates an expected call of FirstSlotAtEpoch.
func (mr *MockBeaconMockRecorder) FirstSlotAtEpoch(epoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstSlotAtEpoch", reflect.TypeOf((*MockBeacon)(nil).FirstSlotAtEpoch), epoch)
}

// ForkAtEpoch mocks base method.
func (m *MockBeacon) ForkAtEpoch(epoch phase0.Epoch) (spec.DataVersion, phase0.Fork) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForkAtEpoch", epoch)
	ret0, _ := ret[0].(spec.DataVersion)
	ret1, _ := ret[1].(phase0.Fork)
	return ret0, ret1
}

// ForkAtEpoch indicates an expected call of ForkAtEpoch.
func (mr *MockBeaconMockRecorder) ForkAtEpoch(epoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForkAtEpoch", reflect.TypeOf((*MockBeacon)(nil).ForkAtEpoch), epoch)
}

// GenesisTime mocks base method.
func (m *MockBeacon) GenesisTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenesisTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GenesisTime indicates an expected call of GenesisTime.
func (mr *MockBeaconMockRecorder) GenesisTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenesisTime", reflect.TypeOf((*MockBeacon)(nil).GenesisTime))
}

// GenesisValidatorsRoot mocks base method.
func (m *MockBeacon) GenesisValidatorsRoot() phase0.Root {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenesisValidatorsRoot")
	ret0, _ := ret[0].(phase0.Root)
	return ret0
}

// GenesisValidatorsRoot indicates an expected call of GenesisValidatorsRoot.
func (mr *MockBeaconMockRecorder) GenesisValidatorsRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenesisValidatorsRoot", reflect.TypeOf((*MockBeacon)(nil).GenesisValidatorsRoot))
}

// IntervalDuration mocks base method.
func (m *MockBeacon) IntervalDuration() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntervalDuration")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// IntervalDuration indicates an expected call of IntervalDuration.
func (mr *MockBeaconMockRecorder) IntervalDuration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntervalDuration", reflect.TypeOf((*MockBeacon)(nil).IntervalDuration))
}

// IsFirstSlotOfEpoch mocks base method.
func (m *MockBeacon) IsFirstSlotOfEpoch(slot phase0.Slot) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFirstSlotOfEpoch", slot)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFirstSlotOfEpoch indicates an expected call of IsFirstSlotOfEpoch.
func (mr *MockBeaconMockRecorder) IsFirstSlotOfEpoch(slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFirstSlotOfEpoch", reflect.TypeOf((*MockBeacon)(nil).IsFirstSlotOfEpoch), slot)
}

// LastSlotOfSyncPeriod mocks base method.
func (m *MockBeacon) LastSlotOfSyncPeriod(period uint64) phase0.Slot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastSlotOfSyncPeriod", period)
	ret0, _ := ret[0].(phase0.Slot)
	return ret0
}

// LastSlotOfSyncPeriod indicates an expected call of LastSlotOfSyncPeriod.
func (mr *MockBeaconMockRecorder) LastSlotOfSyncPeriod(period any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastSlotOfSyncPeriod", reflect.TypeOf((*MockBeacon)(nil).LastSlotOfSyncPeriod), period)
}

// NetworkName mocks base method.
func (m *MockBeacon) NetworkName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkName")
	ret0, _ := ret[0].(string)
	return ret0
}

// NetworkName indicates an expected call of NetworkName.
func (mr *MockBeaconMockRecorder) NetworkName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkName", reflect.TypeOf((*MockBeacon)(nil).NetworkName))
}

// SlotDuration mocks base method.
func (m *MockBeacon) SlotDuration() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlotDuration")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// SlotDuration indicates an expected call of SlotDuration.
func (mr *MockBeaconMockRecorder) SlotDuration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlotDuration", reflect.TypeOf((*MockBeacon)(nil).SlotDuration))
}

// SlotEndTime mocks base method.
func (m *MockBeacon) SlotEndTime(slot phase0.Slot) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlotEndTime", slot)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// SlotEndTime indicates an expected call of SlotEndTime.
func (mr *MockBeaconMockRecorder) SlotEndTime(slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlotEndTime", reflect.TypeOf((*MockBeacon)(nil).SlotEndTime), slot)
}

// SlotStartTime mocks base method.
func (m *MockBeacon) SlotStartTime(slot phase0.Slot) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlotStartTime", slot)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// SlotStartTime indicates an expected call of SlotStartTime.
func (mr *MockBeaconMockRecorder) SlotStartTime(slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlotStartTime", reflect.TypeOf((*MockBeacon)(nil).SlotStartTime), slot)
}

// SlotsPerEpoch mocks base method.
func (m *MockBeacon) SlotsPerEpoch() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlotsPerEpoch")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// SlotsPerEpoch indicates an expected call of SlotsPerEpoch.
func (mr *MockBeaconMockRecorder) SlotsPerEpoch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlotsPerEpoch", reflect.TypeOf((*MockBeacon)(nil).SlotsPerEpoch))
}

// SyncCommitteeSize mocks base method.
func (m *MockBeacon) SyncCommitteeSize() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncCommitteeSize")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// SyncCommitteeSize indicates an expected call of SyncCommitteeSize.
func (mr *MockBeaconMockRecorder) SyncCommitteeSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncCommitteeSize", reflect.TypeOf((*MockBeacon)(nil).SyncCommitteeSize))
}
