// Code generated by MockGen. DO NOT EDIT.
// Source: ./validator_registration.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=./mocks/validator_registration.go -source=./validator_registration.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	storage "github.com/ssvlabs/ssv/registry/storage"
	basedb "github.com/ssvlabs/ssv/storage/basedb"
	gomock "go.uber.org/mock/gomock"
)

// MockrecipientsStorage is a mock of recipientsStorage interface.
type MockrecipientsStorage struct {
	ctrl     *gomock.Controller
	recorder *MockrecipientsStorageMockRecorder
}

// MockrecipientsStorageMockRecorder is the mock recorder for MockrecipientsStorage.
type MockrecipientsStorageMockRecorder struct {
	mock *MockrecipientsStorage
}

// NewMockrecipientsStorage creates a new mock instance.
func NewMockrecipientsStorage(ctrl *gomock.Controller) *MockrecipientsStorage {
	mock := &MockrecipientsStorage{ctrl: ctrl}
	mock.recorder = &MockrecipientsStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrecipientsStorage) EXPECT() *MockrecipientsStorageMockRecorder {
	return m.recorder
}

// GetRecipientData mocks base method.
func (m *MockrecipientsStorage) GetRecipientData(r basedb.Reader, owner common.Address) (*storage.RecipientData, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipientData", r, owner)
	ret0, _ := ret[0].(*storage.RecipientData)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRecipientData indicates an expected call of GetRecipientData.
func (mr *MockrecipientsStorageMockRecorder) GetRecipientData(r, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipientData", reflect.TypeOf((*MockrecipientsStorage)(nil).GetRecipientData), r, owner)
}
